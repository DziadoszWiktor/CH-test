<template>
  <div>
      <ul>
          <li v-for="(car, index) in displayedCars" :key="car.id">
              <img :src="car.imageUrl" width="700" height="600">
              <p>{{ car.make }}</p>
              <p>{{ car.model }}</p>
              <p>{{ car.engine }}</p>
              <p>{{ car.color }}</p>
          </li>
      </ul>
  </div>
</template>

<script>
  import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.10/firebase-app.js";
  import { getFirestore } from 'https://www.gstatic.com/firebasejs/9.6.10/firebase-firestore.js';
  import { collection, doc, getDocs, setDoc } from 'https://www.gstatic.com/firebasejs/9.6.10/firebase-firestore.js';
  import { getStorage, ref, uploadString, getDownloadURL } from "https://www.gstatic.com/firebasejs/9.6.10/firebase-storage.js";

  import { reactive, watch } from 'vue';

  const firebaseConfig = {
        apiKey: "AIzaSyDpRlGDGuk1JUXi0VhvSpVcJwcCm1Q2ep8",
        authDomain: "cars-cf954.firebaseapp.com",
        projectId: "cars-cf954",
        storageBucket: "cars-cf954.appspot.com",
        messagingSenderId: "943137422806",
        appId: "1:943137422806:web:60df9a425e9cf25a26b877"
    };

  const app = initializeApp(firebaseConfig);
  const db = getFirestore(app);

  export default {
      setup() {
          const cars = reactive([]);
          const displayedCars = reactive([]);
          let page = 1;
          let pageSize = 4;

          getDocs(collection(db, "cars")).then((querySnapshot2) => {
              querySnapshot2.forEach(async (doc) => {
                  const storage = getStorage();
                  const refImage = ref(storage, 'cars/' + doc.id + '.jpg');
                  const imageUrl = await getDownloadURL(refImage);
                  cars.push({
                      id: doc.id,
                      make: doc.data().make,
                      model: doc.data().model,
                      engine: doc.data().engine,
                      color: doc.data().color,
                      imageUrl: imageUrl
                  });
              });
          });

          watch(cars, () => {
              displayedCars.splice(0, displayedCars.length, ...cars.slice(0, pageSize * page));
          });

          window.addEventListener('scroll', () => {
              if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {
                  page++;
                  displayedCars.splice(0, displayedCars.length, ...cars.slice(0, pageSize * page));
              }
          });

          return {
              displayedCars
          };
      }
  }
</script>